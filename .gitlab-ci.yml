variables:
  _R_CHECK_CRAN_INCOMING_: "true"
  _R_CHECK_FORCE_SUGGESTS_: "true"
  APT_PKGS: "libcurl4-openssl-dev libssh2-1-dev libssl-dev libxml2-dev zlib1g-dev git" # libgsl0-dev"

stages:
  - test
  - build

image: rocker/tidyverse

before_script:
  - apt-get update
  - apt-get install -y --no-install-recommends ${APT_PKGS}
  - apt-get install -y --no-install-recommends qpdf pandoc pandoc-citeproc
  - R -e 'install.packages(c("httr", "jsonlite", "R6"));'
  - R -e 'install.packages(c("ggplot2", "ggrepel", "knitr"));'
  - R -e 'install.packages(c("parallel", "sticky"));'
  - R -e 'install.packages(c("testthat", "rmarkdown"));'
  - R -e 'install.packages(c("devtools", "pkgdown"));'
  - R -e "install.packages(c('tinytex'), repos='http://cran.rstudio.com')"
  - R -e "tinytex::install_tinytex()"

devtools-check-dev:
  stage: test
  script:
    - R -e 'devtools::check()'
  only:
    - dev

devtools-check-topic-branches:
  stage: test
  script:
    - R -e 'devtools::check()'
  except:
    - dev
    - prod

devtools-check-prod:
  stage: test
  script:
    - R -e 'devtools::check()'
  only:
    - prod

# To have the coverage percentage appear as a gitlab badge follow these
# instructions:
# https://docs.gitlab.com/ee/user/project/pipelines/settings.html#test-coverage-parsing
# The coverage parsing string is
# Coverage: \d+\.\d+

# testing:
#     stage: test
#     allow_failure: true
#     when: on_success
#     only:
#         - master
#     script:
#         - Rscript -e 'install.packages("DT")'
#         - Rscript -e 'covr::gitlab(quiet = FALSE)'
#     artifacts:
#         paths:
#             - public

# To produce a code coverage report as a GitLab page see
# https://about.gitlab.com/2016/11/03/publish-code-coverage-report-with-gitlab-pages/

pages:
  stage: build
  script:
    - R -e 'devtools::document(); pkgdown::build_site();'
    - mkdir public/img
    - cp img/hex-logo.png public/img/hex-logo.png
  artifacts:
    paths:
      - public
  only:
    - prod
